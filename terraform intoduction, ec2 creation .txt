
										Terraform - 01
									=====================
	

https://github.com/iam-veeramalla/terraform-zero-to-hero/tree/main/Day-1

	
--> generally when we create aws resources on aws we see the UI like through console we can create
	when we want to create one s3 bucket through console it will take 2 min but when we have requiremnt for 100 s3 buckets for different people in organization through console it will take 100*2 min 
	to solve above issue we can create aws resources through programatically, aws provide API's by using those apis wwe can connect to aws and use that apis to write some code in templeting lanuage 
	here to interact with apis programming knwledge required but some of might have no programming knowledge aws intoduced CFT 
	by using CFT we can write the files in json/yaml templating language, by providing the resources in that file aws can areate resouces accordingly
		to avoid manual creation aws can create resources by using automation
		
	  CFT --> template ( resources) -->Aws create resorces    ==> this is called as Infrastructure as code ( automating to create resources )
	  IAAS this code can be any thing like python, shell scripting or json/yaml template 
	  
	 IAAS tools:
	 
		AWS --> CFT
		AZURE --> Azure resource manager
		openstak --> heat template
	
	why terraform : ( universal approach)
----------------------

-> we have multiple clouds like aws azure, GCP, openstalk etc devops engineer needs to learn CFT, ARM means specific to cloud and also might have  to learn some scripting language as well 
	
	to solve the above problem devops engineer learn terraform instead of all above. 
	to learn terraform devops engineer know the HCL language it is also some kind of template language just 'provide' the name of cloud provider, terraform file will execute accordingly, some projects can contains high availability and multiple resorces while creating these through manually is not possible means takes lot of time, so terraform solve this problem also
	
	terraform uses Api as code internally , when we write HCL templates specific to cloud providers those template converts apis 's specific to cloud providers
	
	aws --> HCL --> Aws Apis
	azure -->> HCL --> Azure apis
	
	terraform having good community
	
	cross plane is emerging alternative for terraform in the market but still terraform is in form because of simplicity etc
	
 Installation of Terraform :
 --------------------------------
 
 step -1 :
 ---------
 
		in companies used IAM user as aws account not root user 
 
	install awscli to authenticate to aws 
	
	instalation of awscli  on ubuntu :--
	
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo ./aws/install

	by using aws credentials like access key and secret key we can authenticate to aws
	
	run
	
	aws configure
	
	give access_key, secret_key, zone name, data format details then aws is authenticated to my local machine then run aws cli commands like 
	
	aws s3 ls   etc
	
	
	
step -2 :
---------------

   terraform installtion for linux go to
   
   https://developer.hashicorp.com/terraform/install
   
   
Terraform configuration:
------------------------------

https://github.com/iam-veeramalla/terraform-zero-to-hero/blob/main/Day-1/PROJECT-ec2-instance-creation/steps.md

write main.tf file indicates list of resources we want to create

provider Block : if terraform has access to the aws or not checking 

give aws configure if not given for authentication to our local

once credentials already stored by using aws configure provider will check for credentials and authinticate to aws 


	sample main.tf file in the below location
   
	https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance
	
	steps to run terraform files
	
	terraform init 

	to intialize terraform and it will read the main.tf file and to see the provider name and intialize the provider plugin in the name of provider name
	
	terraform plan
	
	dry run where before creating the infrastructure it will show you what exactly it can create  ( aws resource components what aws is going to create)
	
	terraform apply
	
	enter value as yes
	
	instance getting created if that ami provided is correct and it created the same structure shown in the dry run
	
	do ls --> terraform creates state file it will be tracking the main.tf resources
	
	terraform destroy
	
	instance getting terminated
	
	
	
	
	
	
	
	
	
	
	
	
	  
	  